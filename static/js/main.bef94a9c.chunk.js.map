{"version":3,"sources":["redux/selectors.js","redux/actions.js","redux/operations.js","components/Graph/Graph.jsx","components/Table/Table.jsx","components/TickersList.jsx","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["state","app","tickers","tickersLastPrices","getTickersRequest","createAction","getTickersSuccess","getTickersError","addLastPricesRequest","addLastPricesSuccess","addLastPricesError","res","dispatch","a","actions","data","message","error","connect","selectors","getTickers","operations","addLastPriceTickers","chartName","height","width","valueaxis","useState","pricesTickers","setPricesTickers","argument","value","chartData","setChartData","useEffect","length","values","filter","item","Object","keys","map","idx","createChartData","firstItemPrice","name","ticker","price","Number","prevPriceTickers","index","currentPrevPriceArray","newPriceArray","addNewItemToPrices","valueField","argumentField","color","useRowStyles","makeStyles","root","heigth","display","justifyContent","alignItems","borderBottom","priceUp","background","textAlign","fontSize","priceDown","chart","maxWidth","bigchart","displayDate","dateString","date","slice","time","Row","props","row","React","open","setOpen","classes","Fragment","TableRow","className","TableCell","IconButton","aria-label","size","onClick","colorSelectorUpDownPriceLine","component","scope","align","exchange","change","change_percent","dividend","yield","last_trade_time","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","Table","TableHead","TableBody","rows","createRows","createData","getLastPricesArray","pricesArr","curElem","pricesObj","TableContainer","Paper","socket","io","emit","on","response","App","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","logger","store","configureStore","reducer","appReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bef94a9c.chunk.js","sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getTickersArray = (state) => state.app.tickers;\nconst getLastPricesArray = (state) => state.app.tickersLastPrices;\n\nexport default {\n  getTickersArray,\n  getLastPricesArray,\n};\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst getTickersRequest = createAction(\"tickers/addContactRequest\");\nconst getTickersSuccess = createAction(\"tickers/addContactSuccess\");\nconst getTickersError = createAction(\"tickers/addContactError\");\n\nconst addLastPricesRequest = createAction(\n  \"tickersLastPrices/addLastPriceTickersRequest\"\n);\nconst addLastPricesSuccess = createAction(\n  \"tickersLastPrices/addLastPriceTickersSuccess\"\n);\nconst addLastPricesError = createAction(\n  \"tickersLastPrices/addLastPriceTickersError\"\n);\n\nexport default {\n  getTickersRequest,\n  getTickersSuccess,\n  getTickersError,\n  addLastPricesRequest,\n  addLastPricesSuccess,\n  addLastPricesError,\n};\n","import actions from \"./actions\";\n\nconst getTickers = (res) => async (dispatch) => {\n  dispatch(actions.getTickersRequest());\n  try {\n    const data = res;\n    return dispatch(actions.getTickersSuccess(data));\n  } catch (error) {\n    dispatch(actions.getTickersError(error.message));\n  }\n};\n\nconst addLastPriceTickers = (res) => (dispatch) => {\n  dispatch(actions.addLastPricesRequest());\n  try {\n    const data = res;\n    dispatch(actions.addLastPricesSuccess(data));\n  } catch (error) {\n    dispatch(actions.addLastPricesError(error.message));\n  }\n};\nexport default {\n  getTickers,\n  addLastPriceTickers,\n};\n","import { connect } from \"react-redux\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport selectors from \"../../redux/selectors\";\nimport operations from \"../../redux/operations\";\nimport {\n  BarSeries,\n  ValueAxis,\n  Chart,\n  LineSeries,\n} from \"@devexpress/dx-react-chart-material-ui\";\n\nfunction Graph({\n  tickers,\n  addLastPriceTickers,\n  chartName,\n  height,\n  width,\n  valueaxis,\n}) {\n  const [pricesTickers, setPricesTickers] = useState([]);\n  const [chartData, setChartData] = useState([{ argument: 0, value: 0 }]);\n\n  function createNewPrices(pricesTickers) {\n    let data = tickers.map((item) => {\n      let name = item.ticker;\n      let price = item.price;\n      return { [name]: [Number(price)] };\n    });\n    return data;\n  }\n\n  function addNewItemToPrices(prevPriceTickers) {\n    let data = tickers.map((item, index) => {\n      let name = item.ticker;\n      let price = item.price;\n      let currentPrevTicker = prevPriceTickers[index];\n      let currentPrevPriceArray = currentPrevTicker[name];\n      let newPriceArray = [...currentPrevPriceArray, Number(price)];\n      return { [name]: newPriceArray };\n    });\n    return data;\n  }\n  useEffect(() => {\n    createChartData(pricesTickers, chartName);\n  }, [pricesTickers]);\n\n  useEffect(() => {\n    if (pricesTickers.length === 0) {\n      let firstItemPrice = createNewPrices(pricesTickers);\n      setPricesTickers(firstItemPrice);\n    } else if (pricesTickers.length >= 1) {\n      setPricesTickers((prevPriceTickers) => {\n        return addNewItemToPrices(prevPriceTickers);\n      });\n    }\n    addLastPriceTickers(pricesTickers);\n  }, [tickers]);\n\n  function createChartData(pricesTickers, chartName) {\n    if (pricesTickers.length > 0) {\n      let currentTicker = pricesTickers.filter(\n        (item) => chartName === Object.keys(item)[0]\n      );\n      let objValues = currentTicker[0];\n      let arrValues = objValues[chartName];\n      let values = arrValues.map((item, idx) => {\n        return { argument: idx + 1, value: item };\n      });\n      setChartData(values);\n    } else {\n      return setChartData([{ argument: 0, value: 0 }]);\n    }\n  }\n\n  return (\n    <Chart data={chartData} height={height} width={width} valueaxis={valueaxis}>\n      {valueaxis === true ? <ValueAxis /> : null}\n      <LineSeries valueField=\"value\" argumentField=\"argument\" />\n      <BarSeries valueField=\"value\" argumentField=\"argument\" color=\"green\" />\n    </Chart>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  tickers: selectors.getTickersArray(state),\n});\n\nconst mapDispatchToProrps = (dispatch) => ({\n  getTickers: (data) => dispatch(operations.getTickers(data)),\n  addLastPriceTickers: (data) => dispatch(operations.addLastPriceTickers(data)),\n});\nGraph.propTypes = {\n  tickers: PropTypes.array.isRequired,\n  addLastPriceTickers: PropTypes.func.isRequired,\n  chartName: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  valueaxis: PropTypes.bool,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProrps)(Graph);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../../redux/selectors\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport Graph from \"../Graph/Graph\";\n\nconst useRowStyles = makeStyles({\n  root: {\n    \"*\": {\n      heigth: \"10px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    \"& > *\": {\n      borderBottom: \"unset\",\n      heigth: \"10px\",\n    },\n  },\n\n  priceUp: {\n    background: \"#14cc6163\",\n    textAlign: \"center\",\n    fontSize: \"14px\",\n  },\n\n  priceDown: {\n    background: \"#db5e5e4b\",\n    textAlign: \"center\",\n    fontSize: \"14px\",\n  },\n\n  chart: {\n    maxWidth: \"250px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n  },\n  bigchart: {\n    maxWidth: \"900\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n  },\n});\n\nfunction createData({ ...ticker }) {\n  return {\n    ...ticker,\n  };\n}\n\nfunction displayDate(dateString) {\n  let date = dateString.slice(0, 10);\n  let time = dateString.slice(11, 19);\n  return (\n    <>\n      <span>{date}</span> <span>{time}</span>\n    </>\n  );\n}\n\nfunction Row(props) {\n  const { row } = props;\n  const [open, setOpen] = React.useState(false);\n  const classes = useRowStyles();\n\n  return (\n    <React.Fragment>\n      <TableRow className={classes.root}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell\n          className={props.colorSelectorUpDownPriceLine(row, classes)}\n          component=\"th\"\n          scope=\"row\"\n        >\n          {row.ticker}\n        </TableCell>\n        <TableCell align=\"right\">{row.exchange}</TableCell>\n        <TableCell\n          className={props.colorSelectorUpDownPriceLine(row, classes)}\n          align=\"right\"\n        >\n          {row.price}\n        </TableCell>\n        <TableCell align=\"right\">{row.change}</TableCell>\n        <TableCell align=\"right\">{row.change_percent}</TableCell>\n        <TableCell align=\"right\">{row.dividend}</TableCell>\n        <TableCell align=\"right\">{row.yield}</TableCell>\n        <TableCell className={classes.chart} align=\"right\">\n          <>\n            <Graph\n              key={`little-chart-${row.ticker}`}\n              chartName={row.ticker}\n              height={50}\n              width={250}\n            />\n          </>\n        </TableCell>\n        <TableCell align=\"right\">{displayDate(row.last_trade_time)}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={10}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                {row.ticker}\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead></TableHead>\n                <TableBody>\n                  <TableRow className={classes.bigchart} align=\"center\">\n                    <>\n                      <Graph\n                        key={`big-chart-${row.ticker}`}\n                        chartName={row.ticker}\n                        height={150}\n                        width={900}\n                        valueaxis={true}\n                      />\n                    </>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nRow.propTypes = {\n  row: PropTypes.shape({\n    ticker: PropTypes.string.isRequired,\n    change: PropTypes.string.isRequired,\n    change_percent: PropTypes.string.isRequired,\n    dividend: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    yield: PropTypes.string.isRequired,\n  }).isRequired,\n};\nlet rows = [];\nfunction createRows(tickers) {\n  return tickers.map((ticker) => {\n    return createData(ticker);\n  });\n}\n\nfunction CollapsibleTable({ tickers, getLastPricesArray }) {\n  function colorSelectorUpDownPriceLine(row, classes) {\n    let curElem = getLastPricesArray.filter(\n      (item) => Object.keys(item)[0] === row.ticker\n    );\n    let pricesObj = curElem[0];\n    let pricesArr;\n    if (curElem.length !== 0) {\n      pricesArr = Object.values(pricesObj)[0];\n      let endPrice = pricesArr[pricesArr.length - 1];\n      if (endPrice < row.price) {\n        return classes.priceUp;\n      } else {\n        return classes.priceDown;\n      }\n    }\n  }\n\n  rows = createRows(tickers);\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"collapsible table\">\n        <TableHead>\n          <TableRow>\n            <TableCell />\n            <TableCell>Name</TableCell>\n            <TableCell align=\"right\">Exchange</TableCell>\n            <TableCell align=\"right\">Price</TableCell>\n            <TableCell align=\"right\">Change</TableCell>\n            <TableCell align=\"right\">Change,%</TableCell>\n            <TableCell align=\"right\">Dividend</TableCell>\n            <TableCell align=\"right\">Yield</TableCell>\n            <TableCell align=\"center\">Chart</TableCell>\n            <TableCell align=\"right\">Last trade time</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => {\n            return (\n              <Row\n                colorSelectorUpDownPriceLine={colorSelectorUpDownPriceLine}\n                key={row.ticker}\n                row={row}\n              />\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  tickers: selectors.getTickersArray(state),\n  getLastPricesArray: selectors.getLastPricesArray(state),\n});\n\nCollapsibleTable.propTypes = {\n  tickers: PropTypes.array.isRequired,\n  getLastPricesArray: PropTypes.array.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(CollapsibleTable);\n","import { connect } from \"react-redux\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { io } from \"socket.io-client\";\nimport selectors from \"../redux/selectors\";\nimport operations from \"../redux/operations\";\nimport CollapsibleTable from \"./Table/Table\";\n\nconst socket = io(\"http://localhost:4000\");\nsocket.emit(\"start\");\n\nfunction TickersList({ getTickers }) {\n  useEffect(() => {\n    socket.on(\"ticker\", (response) => {\n      getTickers(response);\n    });\n  }, []);\n\n  return (\n    <section>\n      <h2>TickersList</h2>\n      <CollapsibleTable />\n    </section>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  tickers: selectors.getTickersArray(state),\n});\n\nconst mapDispatchToProrps = (dispatch) => ({\n  getTickers: (data) => dispatch(operations.getTickers(data)),\n});\nTickersList.propTypes = {\n  getTickers: PropTypes.func.isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProrps)(TickersList);\n","import \"./App.css\";\nimport TickersList from \"./components/TickersList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TickersList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"./actions\";\nconst tickers = createReducer([], {\n  [actions.getTickersSuccess]: (_, { payload }) => [...payload],\n});\n\nconst tickersLastPrices = createReducer([], {\n  [actions.addLastPricesSuccess]: (_, { payload }) => [...payload],\n});\n\nexport default combineReducers({ tickers, tickersLastPrices });\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\n\nimport appReducer from \"./reducers\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    app: appReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport default { store };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}